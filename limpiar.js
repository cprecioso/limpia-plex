// Generated by CoffeeScript 1.10.0
(function() {
  var arg, args, basename, currentDir, extname, folder, folderName, i, j, join, k, keep, len, len1, len2, ls, pwd, reason, ref, ref1, ref2, ref3, ref4, requiredExtensions, rootFolder, searchFor, toRemove, trash, verbose,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require("path"), join = ref.join, extname = ref.extname, basename = ref.basename;

  ref1 = require("shelljs"), pwd = ref1.pwd, ls = ref1.ls;

  trash = require("trash");

  require("colors");

  currentDir = pwd();

  args = process.argv.slice(2);

  verbose = false;

  searchFor = [];

  requiredExtensions = ["mp4", "m4v", "mkv", "avi", "part", "torrent"];

  for (i = 0, len = args.length; i < len; i++) {
    arg = args[i];
    if (arg[0] === "-") {
      switch (arg) {
        case "-v":
        case "--verbose":
          verbose = true;
      }
    } else {
      searchFor.push(arg);
    }
  }

  if (searchFor.length === 0) {
    searchFor = ["Películas", "Series"];
  }

  toRemove = [];

  ref2 = ls(currentDir);
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    rootFolder = ref2[j];
    if (!(indexOf.call(searchFor, rootFolder) >= 0)) {
      continue;
    }
    rootFolder = join(currentDir, rootFolder);
    console.log("--- Processing ".blue + ("" + (basename(rootFolder))).bold + " ---".blue);
    ref3 = ls(rootFolder);
    for (k = 0, len2 = ref3.length; k < len2; k++) {
      folder = ref3[k];
      folder = join(rootFolder, folder);
      folderName = basename(folder);
      ref4 = (function() {
        var extension, file, l, len3, lfile, ref4;
        ref4 = ls("-R", folder);
        for (l = 0, len3 = ref4.length; l < len3; l++) {
          file = ref4[l];
          lfile = file.toLowerCase();
          extension = extname(lfile).slice(1);
          if (lfile.includes("sample")) {
            console.log("\t -> Skipped sample".reset, ("" + file).bold);
            continue;
          }
          if (indexOf.call(requiredExtensions, extension) >= 0) {
            return [true, basename(file)];
          }
        }
        return [false];
      })(), keep = ref4[0], reason = ref4[1];
      reason = reason ? "\t -> Found".reset + (" " + reason).bold : "";
      if (keep) {
        console.log("Keep\t".green, ("" + folderName).bold);
      } else {
        console.log("Remove\t".red, ("" + folderName).bold);
        toRemove.push(folder);
      }
    }
  }

  if (toRemove.length === 0) {
    process.exit(0);
  }

  process.stdout.write("Apply?".bgRed.white + " (Y/n) ");

  process.stdin.setEncoding("utf8").once("data", function(str) {
    switch (str.trim().toLowerCase()) {
      case "":
      case "y":
      case "yes":
        console.log("Applying...");
        return trash(toRemove).then(function() {
          console.log("Success!".green);
          return process.exit(0);
        }, function(e) {
          console.log("Error moving to trash!".red.bold);
          if (e) {
            console.log(e);
          }
          return process.exit(1);
        });
      default:
        console.log("Not applied");
        return process.exit(0);
    }
  }).resume();

}).call(this);
